import React__default, { useState, useEffect, useCallback, createElement } from 'react';

var cachedScripts = [];

function useScript(url, async, appendToHeadOrBody) {
  if (async === void 0) {
    async = true;
  }

  if (appendToHeadOrBody === void 0) {
    appendToHeadOrBody = 'head';
  }

  var _React$useState = useState({
    loaded: false,
    error: false
  }),
      state = _React$useState[0],
      setState = _React$useState[1];

  useEffect(function () {
    if (cachedScripts.includes(url)) {
      setState({
        loaded: true,
        error: false
      });
    } else {
      cachedScripts.push(url);
      var script = document.createElement('script');
      script.src = url;
      script.async = async;

      var onScriptLoad = function onScriptLoad() {
        setState({
          loaded: true,
          error: false
        });
      };

      var onScriptError = function onScriptError() {
        var index = cachedScripts.indexOf(url);
        if (index >= 0) cachedScripts.splice(index, 1);
        script.remove();
        setState({
          loaded: true,
          error: true
        });
      };

      script.addEventListener('load', onScriptLoad);
      script.addEventListener('error', onScriptError);
      appendToHeadOrBody === 'head' ? document.head.appendChild(script) : document.body.appendChild(script);
      return function () {
        script.removeEventListener('load', onScriptLoad);
        script.removeEventListener('error', onScriptError);
      };
    }

    return undefined;
  }, [url, async, appendToHeadOrBody]);
  return [state.loaded, state.error];
}

var useAcceptJs = function useAcceptJs(_ref) {
  var _ref$environment = _ref.environment,
      environment = _ref$environment === void 0 ? 'SANDBOX' : _ref$environment,
      authData = _ref.authData;

  var _useState = useState(true),
      loading = _useState[0],
      setLoading = _useState[1];

  var scriptUrl = environment === 'PRODUCTION' ? 'https://js.authorize.net/v1/Accept.js' : 'https://jstest.authorize.net/v1/Accept.js';

  var _useScript = useScript(scriptUrl),
      scriptLoaded = _useScript[0],
      scriptError = _useScript[1];

  useEffect(function () {
    if (scriptLoaded || scriptError) {
      setLoading(false);
    }
  }, [scriptLoaded, scriptError]);

  var dispatchData = function dispatchData(paymentData) {
    var payload = paymentData.cardData ? {
      cardData: paymentData.cardData,
      authData: authData
    } : {
      bankData: paymentData.bankData,
      authData: authData
    };
    return new Promise(function (resolve, reject) {
      if (window) {
        window.Accept.dispatchData(payload, function (response) {
          if (response.messages.resultCode === 'Ok') {
            resolve(response);
          }

          reject(response);
        });
      }
    });
  };

  return {
    dispatchData: dispatchData,
    loading: loading,
    error: scriptError
  };
};

var HostedForm = function HostedForm(_ref) {
  var authData = _ref.authData,
      onSubmit = _ref.onSubmit,
      _ref$environment = _ref.environment,
      environment = _ref$environment === void 0 ? 'SANDBOX' : _ref$environment,
      _ref$billingAddressOp = _ref.billingAddressOptions,
      billingAddressOptions = _ref$billingAddressOp === void 0 ? {
    show: true,
    required: true
  } : _ref$billingAddressOp,
      _ref$buttonText = _ref.buttonText,
      buttonText = _ref$buttonText === void 0 ? 'Pay' : _ref$buttonText,
      _ref$formButtonText = _ref.formButtonText,
      formButtonText = _ref$formButtonText === void 0 ? 'Pay' : _ref$formButtonText,
      _ref$formHeaderText = _ref.formHeaderText,
      formHeaderText = _ref$formHeaderText === void 0 ? 'Pay' : _ref$formHeaderText,
      _ref$paymentOptions = _ref.paymentOptions,
      paymentOptions = _ref$paymentOptions === void 0 ? {
    showCreditCard: true,
    showBankAccount: false
  } : _ref$paymentOptions,
      buttonStyle = _ref.buttonStyle,
      buttonClassName = _ref.buttonClassName,
      errorTextStyle = _ref.errorTextStyle,
      errorTextClassName = _ref.errorTextClassName,
      containerStyle = _ref.containerStyle,
      containerClassName = _ref.containerClassName,
      disabled = _ref.disabled;

  var _React$useState = useState(true),
      loading = _React$useState[0],
      setLoading = _React$useState[1];

  var scriptUrl = environment === 'PRODUCTION' ? 'https://js.authorize.net/v3/AcceptUI.js' : 'https://jstest.authorize.net/v3/AcceptUI.js';

  var _useScript = useScript(scriptUrl),
      scriptLoaded = _useScript[0],
      scriptError = _useScript[1];

  useEffect(function () {
    if (scriptLoaded || scriptError) {
      setLoading(false);
    }
  }, [scriptLoaded, scriptError]);

  var _React$useState2 = useState(null),
      errors = _React$useState2[0],
      setErrors = _React$useState2[1];

  var responseHandler = useCallback(function (response) {
    if (response.messages.resultCode === 'Error') {
      setErrors(response.messages.message);
    } else {
      onSubmit(response);
    }
  }, [onSubmit]);
  useEffect(function () {
    if (!scriptError && !loading && !window.responseHandler) window.responseHandler = responseHandler;
    if (scriptError) setErrors('There was a problem loading the Accept.JS script. Please try again.');
  }, [loading, scriptError, responseHandler]);
  return createElement("div", {
    style: containerStyle,
    className: containerClassName ? containerClassName : undefined
  }, createElement("button", {
    type: "button",
    style: buttonStyle,
    className: buttonClassName ? "AcceptUI " + buttonClassName : 'AcceptUI',
    "data-billingaddressoptions": JSON.stringify(billingAddressOptions),
    "data-apiloginid": authData.apiLoginID,
    "data-clientkey": authData.clientKey,
    "data-acceptuiformbtntxt": formButtonText,
    "data-acceptuiformheadertxt": formHeaderText,
    "data-paymentoptions": JSON.stringify(paymentOptions),
    "data-responsehandler": "responseHandler",
    disabled: scriptError || loading || disabled
  }, buttonText), errors && createElement("div", {
    style: errorTextStyle,
    className: errorTextClassName != null ? errorTextClassName : ''
  }, typeof errors === 'string' ? errors : errors.map(function (error, index) {
    return createElement("div", {
      key: "error-" + index
    }, "`Error ($", error.code, "): $", error.text, ")`");
  })));
};

var RedirectIntegration = function RedirectIntegration(_ref) {
  var formToken = _ref.formToken,
      postUrl = _ref.postUrl,
      children = _ref.children,
      className = _ref.className,
      style = _ref.style;
  return React__default.createElement("form", {
    method: "post",
    action: postUrl
  }, React__default.createElement("input", {
    type: "hidden",
    name: "token",
    value: formToken
  }), React__default.createElement("button", {
    className: className,
    style: className ? {} : style
  }, children));
};

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var parseQueryString = function parseQueryString(queryString) {
  var arr = queryString.split('&');
  return arr.reduce(function (acc, curr) {
    var _curr$split = curr.split('='),
        key = _curr$split[0],
        value = _curr$split[1];

    acc[key] = value;
    return acc;
  }, {});
};

var defaultBackdropStyle = {
  position: 'fixed',
  left: '0px',
  top: '0px',
  width: '100%',
  height: '100%',
  zIndex: 1,
  backgroundColor: '#808080',
  opacity: '0.5',
  filter: 'alpha(opacity=50)'
};
var defaultContainerStyle = {
  borderRadius: '6px',
  position: 'fixed',
  boxShadow: 'rgba(0, 0, 0, 0.4) 5px 5px 16px',
  zIndex: 999999,
  display: 'block',
  overflow: 'hidden',
  left: '50%',
  top: '50%',
  backgroundColor: '#ffffff'
};

function useWindowSize() {
  var _useState = useState({
    width: undefined,
    height: undefined
  }),
      windowSize = _useState[0],
      setWindowSize = _useState[1];

  useEffect(function () {
    function handleResize() {
      setWindowSize({
        width: window.innerWidth,
        height: window.innerHeight
      });
    }

    window.addEventListener('resize', handleResize);
    handleResize();
    return function () {
      return window.removeEventListener('resize', handleResize);
    };
  }, []);
  return windowSize;
}

var IFrameIntegrationContext = React__default.createContext(null);
var useIFrameIntegrationContext = function useIFrameIntegrationContext() {
  var context = React__default.useContext(IFrameIntegrationContext);

  if (!context) {
    throw new Error("AcceptHosted compound components cannot be rendered outside the AcceptHosted component");
  }

  return context;
};
var IFrameIntegration = function IFrameIntegration(_ref) {
  var formToken = _ref.formToken,
      postUrl = _ref.postUrl,
      onTransactionResponse = _ref.onTransactionResponse,
      onCancel = _ref.onCancel,
      onSuccessfulSave = _ref.onSuccessfulSave,
      onResize = _ref.onResize,
      children = _ref.children;

  var _React$useState = React__default.useState(false),
      popupIsShown = _React$useState[0],
      setPopupIsShown = _React$useState[1];

  var popupFormRef = React__default.useRef(null);
  var popupRef = React__default.useRef(null);
  var iFrameRef = React__default.useRef(null);

  var handleShowPopup = function handleShowPopup() {
    setPopupIsShown(true);
  };

  var handleClosePopup = function handleClosePopup() {
    setPopupIsShown(false);
  };

  var contextValue = {
    popupIsShown: popupIsShown,
    popupFormRef: popupFormRef,
    popupRef: popupRef,
    iFrameRef: iFrameRef,
    formToken: formToken,
    postUrl: postUrl,
    handleShowPopup: handleShowPopup,
    handleClosePopup: handleClosePopup
  };
  React__default.useEffect(function () {
    if (!window.AuthorizeNetIFrame) {
      window.AuthorizeNetIFrame = {
        onReceiveCommunication: function onReceiveCommunication(querystr) {
          var params = parseQueryString(querystr);

          switch (params['action']) {
            case 'successfulSave':
              if (onSuccessfulSave) onSuccessfulSave();
              handleClosePopup();
              break;

            case 'cancel':
              if (onCancel) onCancel();
              handleClosePopup();
              break;

            case 'transactResponse':
              var response = params['response'];
              var parsedResponse;

              if (response) {
                parsedResponse = JSON.parse(response);
                onTransactionResponse(parsedResponse);
              } else {
                console.error('Did not receive a transaction response despite receiving a transactResponse action!');
              }

              handleClosePopup();
              break;

            case 'resizeWindow':
              var width = params['width'];
              var height = params['height'];

              if (width && height) {
                var w = parseInt(width);
                var h = parseInt(height);

                if (iFrameRef.current && popupRef.current) {
                  iFrameRef.current.style.width = '100%';
                  iFrameRef.current.style.height = h.toString() + "px";
                  popupRef.current.style.height = h.toString() + "px";
                }

                if (onResize) onResize(w, h);
              }

              break;
          }
        }
      };
    }
  });
  return React__default.createElement(IFrameIntegrationContext.Provider, {
    value: contextValue
  }, children);
};
var IFrameIntegrationButton = function IFrameIntegrationButton(_ref2) {
  var children = _ref2.children,
      className = _ref2.className;

  var _useIFrameIntegration = useIFrameIntegrationContext(),
      postUrl = _useIFrameIntegration.postUrl,
      handleShowPopup = _useIFrameIntegration.handleShowPopup,
      formToken = _useIFrameIntegration.formToken,
      popupIsShown = _useIFrameIntegration.popupIsShown;

  return React__default.createElement("form", {
    method: "post",
    action: postUrl,
    id: "formAuthorizeNetPopup",
    name: "formAuthorizeNetPopup",
    target: "iframeAuthorizeNet",
    onSubmit: handleShowPopup
  }, React__default.createElement("input", {
    type: "hidden",
    id: "popupToken",
    name: "token",
    value: formToken
  }), React__default.createElement("button", {
    disabled: popupIsShown,
    className: className
  }, children));
};
var IFrameContainer = function IFrameContainer(_ref3) {
  var children = _ref3.children,
      className = _ref3.className,
      style = _ref3.style;

  var _useIFrameIntegration2 = useIFrameIntegrationContext(),
      popupIsShown = _useIFrameIntegration2.popupIsShown,
      popupRef = _useIFrameIntegration2.popupRef;

  var windowSize = useWindowSize();

  var _React$useState2 = React__default.useState(0),
      offsetWidth = _React$useState2[0],
      setOffsetWidth = _React$useState2[1];

  var _React$useState3 = React__default.useState(0),
      offsetHeight = _React$useState3[0],
      setOffsetHeight = _React$useState3[1];

  React__default.useEffect(function () {
    var _popupRef$current, _popupRef$current2;

    setOffsetWidth(Math.floor((((_popupRef$current = popupRef.current) === null || _popupRef$current === void 0 ? void 0 : _popupRef$current.clientWidth) || 0) / 2));
    setOffsetHeight(Math.floor((((_popupRef$current2 = popupRef.current) === null || _popupRef$current2 === void 0 ? void 0 : _popupRef$current2.clientHeight) || 0) / 2));
  }, [popupRef]);
  return React__default.createElement("div", {
    className: className,
    ref: popupRef,
    style: className ? {
      display: popupIsShown ? '' : 'none'
    } : _extends({}, defaultContainerStyle, style, {
      display: popupIsShown ? '' : 'none',
      width: windowSize.width ? windowSize.width > 576 ? '70%' : '300px' : '300px',
      height: '90%',
      marginLeft: "-" + offsetWidth + "px",
      marginTop: "-" + offsetHeight + "px"
    })
  }, children);
};
var IFrameBackdrop = function IFrameBackdrop(_ref4) {
  var className = _ref4.className,
      style = _ref4.style;

  var _useIFrameIntegration3 = useIFrameIntegrationContext(),
      popupIsShown = _useIFrameIntegration3.popupIsShown;

  return React__default.createElement("div", {
    className: className,
    style: className ? {
      display: popupIsShown ? '' : 'none'
    } : _extends({}, defaultBackdropStyle, style, {
      display: popupIsShown ? '' : 'none'
    })
  });
};
var IFrame = function IFrame(_ref5) {
  var className = _ref5.className,
      style = _ref5.style;
  return React__default.createElement("iframe", {
    name: "iframeAuthorizeNet",
    id: "iframeAuthorizeNet",
    frameBorder: "0",
    scrolling: "no",
    width: "100%",
    height: "100%",
    className: className,
    style: className ? {} : style
  });
};

var AcceptHosted = function AcceptHosted(props) {
  var postUrl = props.environment === 'PRODUCTION' ? 'https://accept.authorize.net/payment/payment' : 'https://test.authorize.net/payment/payment';

  if (props.integration === 'redirect') {
    return createElement(RedirectIntegration, {
      formToken: props.formToken,
      postUrl: postUrl
    }, props.children);
  }

  if (props.integration === 'iframe') {
    return createElement(IFrameIntegration, {
      formToken: props.formToken,
      postUrl: postUrl,
      onTransactionResponse: props.onTransactionResponse,
      onCancel: props.onCancel,
      onResize: props.onResize,
      onSuccessfulSave: props.onSuccessfulSave
    }, props.children);
  }

  return null;
};

AcceptHosted.Button = IFrameIntegrationButton;
AcceptHosted.IFrameContainer = IFrameContainer;
AcceptHosted.IFrameBackdrop = IFrameBackdrop;
AcceptHosted.IFrame = IFrame;

export { AcceptHosted, HostedForm, useAcceptJs };
//# sourceMappingURL=index.modern.js.map

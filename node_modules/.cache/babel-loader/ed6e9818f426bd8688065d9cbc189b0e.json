{"ast":null,"code":"var _jsxFileName = \"/Users/joshuaadams/Documents/BOM/src/Admin/Events/Registration.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { useParams, NavLink } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { useHistory } from 'react-router-dom';\nimport RegistrationForm from \"../Forms/BackEnd/RegistrationForm\";\nimport { DataGrid, GridToolbar, GridRowParams } from '@mui/x-data-grid';\nimport { useSnackbar } from 'notistack';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Registration = props => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const history = useHistory();\n  const [bomEvent, setEvent] = useState({});\n  const {\n    enqueueSnackbar,\n    closeSnackbar\n  } = useSnackbar();\n  const params = useParams();\n  const eventid = params.eventid;\n  console.log(params.eventid);\n  const columns = [{\n    field: 'RegistrationID',\n    headerName: 'ID',\n    width: 200\n  }, {\n    field: 'RegistrationName',\n    headerName: 'Title',\n    width: 400\n  }, {\n    field: 'RegistrationCost',\n    headerName: 'Cost',\n    width: 200\n  }, {\n    field: 'RegistrationDescription',\n    headerName: 'Description',\n    width: 300\n  }];\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n\n      try {\n        const result = await axios({\n          method: 'get',\n          url: 'https://bomreactapi.azurewebsites.net/events/getregistrations?eventid=' + eventid,\n          data: {\n            eventid: eventid // This is the body part\n\n          }\n        });\n        setData(result.data);\n        console.log(result.data);\n        enqueueSnackbar('Registrations fetch success');\n      } catch (error) {\n        setError(true); //enqueueSnackbar('Event fetch failed');\n      }\n\n      setIsLoading(false); //console.log(data);\n    };\n\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: `red`\n      },\n      children: \"Error occurred while fetching api, Please contact an admin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 15\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading ...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(NavLink, {\n        className: \"btn\",\n        to: \"/admin/events/edit/registration/add/\" + eventid,\n        children: \"Add Registration\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          height: '500px',\n          width: '1000px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            flexGrow: 1\n          },\n          children: /*#__PURE__*/_jsxDEV(DataGrid, {\n            columns: columns,\n            rows: data,\n            getRowId: row => row.RegistrationID,\n            onRowSelected: row => history.push(\"/admin/events/edit/registration/\" + row.RegistrationID + '/' + eventid),\n            disableSelectionOnClick: true,\n            disableMultipleSelection: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 1\n  }, this);\n};\n\n_s(Registration, \"s5ZVxyQO+Tld8gpLgi3zGob2gH4=\", false, function () {\n  return [useHistory, useSnackbar, useParams];\n});\n\n_c = Registration;\nexport default Registration;\n\nvar _c;\n\n$RefreshReg$(_c, \"Registration\");","map":{"version":3,"sources":["/Users/joshuaadams/Documents/BOM/src/Admin/Events/Registration.js"],"names":["React","Component","useState","useEffect","useParams","NavLink","axios","useHistory","RegistrationForm","DataGrid","GridToolbar","GridRowParams","useSnackbar","Registration","props","data","setData","isLoading","setIsLoading","error","setError","history","bomEvent","setEvent","enqueueSnackbar","closeSnackbar","params","eventid","console","log","columns","field","headerName","width","fetchData","result","method","url","color","display","height","flexGrow","row","RegistrationID","push"],"mappings":"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","sourcesContent":["import React,{Component} from \"react\"\nimport {useState,useEffect} from \"react\"\nimport {useParams, NavLink} from \"react-router-dom\"\nimport axios from \"axios\"\nimport { useHistory } from 'react-router-dom';\nimport RegistrationForm from \"../Forms/BackEnd/RegistrationForm\";\nimport { DataGrid , GridToolbar, GridRowParams} from '@mui/x-data-grid';\nimport { useSnackbar } from 'notistack';\n\nconst Registration = (props) => {\n   \n    const [data, setData] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(false);\n    const history = useHistory();\n    const [bomEvent, setEvent] = useState({});\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const params = useParams();\n\n    const eventid = params.eventid;\n    console.log(params.eventid);\n\n    const columns = [\n        { field: 'RegistrationID', headerName: 'ID', width:200 },\n        { field: 'RegistrationName', headerName: 'Title', width:400},\n        { field: 'RegistrationCost', headerName: 'Cost', width:200},\n        { field: 'RegistrationDescription', headerName:'Description', width:300}\n      ];\n    \n      useEffect(() => {\n        const fetchData = async () => {\n          setIsLoading(true);\n          try{\n              const result = await axios({\n                method: 'get',\n                url: 'https://bomreactapi.azurewebsites.net/events/getregistrations?eventid=' + eventid,\n                data: {\n                    eventid: eventid, // This is the body part\n                }\n              });\n              setData(result.data);\n              console.log(result.data);\n              enqueueSnackbar('Registrations fetch success');\n          }\n            catch(error){\n            setError(true)\n            //enqueueSnackbar('Event fetch failed');\n          }\n     \n          \n          setIsLoading(false);\n          //console.log(data);\n        };\n  \n        fetchData();\n    }, []);\n  \n    \n \n\n    return(\n<div>\n            {error && (\n              <div style={{ color: `red` }}>\n                Error occurred while fetching api, Please contact an admin\n              </div>\n            )}\n            {isLoading ? (\n        <div>Loading ...</div>\n          ) : (\n            <div>\n                <NavLink className=\"btn\" to={\"/admin/events/edit/registration/add/\" + eventid}>Add Registration</NavLink>\n            <div style={{ display: 'flex', height: '500px', width:'1000px' }}>\n                \n              <div style={{ flexGrow: 1 }}>\n                <DataGrid columns={columns} rows={data} getRowId={(row) => row.RegistrationID} onRowSelected={(row) => history.push(\"/admin/events/edit/registration/\" + row.RegistrationID + '/' + eventid)} disableSelectionOnClick={true} disableMultipleSelection={true} /> \n              </div>\n            </div>\n            </div>\n          )}\n          </div>) \n                  \n    }\n\n\nexport default Registration"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/joshuaadams/Documents/BOM/src/Admin/Events/GetEvents.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport EventType from \"./EventType\";\nimport { useHistory } from 'react-router-dom';\nimport { DataGrid, GridToolbar, GridRowParams } from '@mui/x-data-grid';\nimport { Button } from \"@mui/material\";\nimport { useSnackbar } from 'notistack'; //import { authHeader } from '../Authentication/authHeader'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GetEvents = props => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [search, setSearch] = useState('');\n  const history = useHistory();\n  const {\n    enqueueSnackbar,\n    closeSnackbar\n  } = useSnackbar(); //console.log(localStorage.getItem('user'));\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n\n      try {\n        const result = await axios('https://bomreactapi.azurewebsites.net/events/getevents');\n        setData(result.data);\n        enqueueSnackbar('Events fetch success');\n      } catch (error) {\n        setError(true);\n        enqueueSnackbar('Event fetch failed');\n      }\n\n      setIsLoading(false); //console.log(data);\n    };\n\n    fetchData();\n  }, []);\n\n  const handleClone = (event, cellValues) => {\n    //console.log(cellValues.row);\n    enqueueSnackbar('Event Cloned');\n  };\n\n  function handleSearchChange(input) {\n    setSearch(input.value);\n    let value = input.target.value.toLowerCase();\n    let result = data.filter(item => item[\"BP_Title\"].toLowerCase().includes(value) || item[\"BP_Description\"].toLowerCase().includes(value));\n    setFilteredData(arr => result);\n  }\n\n  const columns = [{\n    field: \"Actions\",\n    width: 75,\n    renderCell: cellValues => {\n      return /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: event => {\n          event.ignore = true;\n          handleClone(event, cellValues);\n        },\n        children: \"Clone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this);\n    }\n  }, {\n    field: 'EventsID',\n    headerName: 'ID',\n    width: 125\n  }, {\n    field: 'BP_Title',\n    headerName: 'Title',\n    width: 200\n  }, {\n    field: 'BP_Type',\n    headerName: 'Type',\n    width: 100\n  }, {\n    field: 'BP_Address',\n    headerName: 'Address',\n    width: 200\n  }, {\n    field: 'BP_Categories',\n    headerName: 'Categories',\n    width: 100,\n    renderCell: cellValues => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: getCategoriesById(cellValues)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }, this);\n    }\n  }];\n  const gridStyle = {\n    width: 1000\n  };\n\n  function getCategoriesById(input) {\n    const returnValueString = '';\n\n    try {\n      //console.log(JSON.stringify(values.value));\n      let splitVals = input.value.split(';'),\n          i;\n\n      for (i = 0; i < splitVals.length; i++) {\n        //get corresponding categories\n        let categoryId = splitVals[i];\n        returnValueString += \"Category,\";\n      }\n    } catch (ex) {// console.log(ex);\n    }\n\n    return returnValueString;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: `red`\n      },\n      children: \"Error occurred while fetching api, Please contact an admin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 15\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading ...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        placeholder: \"Search Events\",\n        value: search,\n        onChange: handleSearchChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          height: '500px',\n          width: '1000px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            flexGrow: 1\n          },\n          children: /*#__PURE__*/_jsxDEV(DataGrid, {\n            columns: columns,\n            rows: filteredData && filteredData.length > 0 ? filteredData : data,\n            getRowId: row => row.EventsID //onRowClick={(row) => history.push(\"/events/edit/\" + row.id)} \n            ,\n            onRowClick: (params, event) => {\n              if (!event.ignore) {\n                history.push(\"/admin/events/edit/\" + params.row.EventsID); //console.log(\"push -> /roles/\" + params.row.id);\n              }\n            },\n            components: {\n              Toolbar: GridToolbar\n            },\n            disableMultipleSelection: true,\n            disableSelectionOnClick: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 11\n  }, this);\n};\n\n_s(GetEvents, \"ItIcEI6MvhqCw7lpBq+tnCjracg=\", false, function () {\n  return [useHistory, useSnackbar];\n});\n\n_c = GetEvents;\nexport default GetEvents;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetEvents\");","map":{"version":3,"sources":["/Users/joshuaadams/Documents/BOM/src/Admin/Events/GetEvents.js"],"names":["React","useState","useEffect","axios","EventType","useHistory","DataGrid","GridToolbar","GridRowParams","Button","useSnackbar","GetEvents","props","data","setData","filteredData","setFilteredData","isLoading","setIsLoading","error","setError","search","setSearch","history","enqueueSnackbar","closeSnackbar","fetchData","result","handleClone","event","cellValues","handleSearchChange","input","value","target","toLowerCase","filter","item","includes","arr","columns","field","width","renderCell","ignore","headerName","getCategoriesById","gridStyle","returnValueString","splitVals","split","i","length","categoryId","ex","color","display","height","flexGrow","row","EventsID","params","push","Toolbar"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAwBC,SAAxB,QAAwC,OAAxC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,QAAT,EAAoBC,WAApB,EAAiCC,aAAjC,QAAqD,kBAArD;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,WAAT,QAA4B,WAA5B,C,CACA;;;;AAIA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AAC3B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACc,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACgB,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACkB,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACoB,MAAD,EAASC,SAAT,IAAsBrB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAMsB,OAAO,GAAGlB,UAAU,EAA1B;AACA,QAAM;AAAEmB,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,MAAqCf,WAAW,EAAtD,CAP2B,CAS3B;;AAEAR,EAAAA,SAAS,CAAC,MAAM;AAEd,UAAMwB,SAAS,GAAG,YAAY;AAC5BR,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAG;AACC,cAAMS,MAAM,GAAG,MAAMxB,KAAK,CACxB,wDADwB,CAA1B;AAGAW,QAAAA,OAAO,CAACa,MAAM,CAACd,IAAR,CAAP;AACAW,QAAAA,eAAe,CAAC,sBAAD,CAAf;AACH,OAND,CAOE,OAAML,KAAN,EAAY;AACZC,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACAI,QAAAA,eAAe,CAAC,oBAAD,CAAf;AACD;;AAGDN,MAAAA,YAAY,CAAC,KAAD,CAAZ,CAf4B,CAgB5B;AACD,KAjBD;;AAmBAQ,IAAAA,SAAS;AACV,GAtBQ,EAsBN,EAtBM,CAAT;;AAwBA,QAAME,WAAW,GAAG,CAACC,KAAD,EAAQC,UAAR,KAAuB;AACzC;AACAN,IAAAA,eAAe,CAAC,cAAD,CAAf;AACD,GAHD;;AAKA,WAASO,kBAAT,CAA4BC,KAA5B,EAAkC;AAChCV,IAAAA,SAAS,CAACU,KAAK,CAACC,KAAP,CAAT;AACA,QAAIA,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaD,KAAb,CAAmBE,WAAnB,EAAZ;AACG,QAAIR,MAAM,GAAGd,IAAI,CAACuB,MAAL,CAAYC,IAAI,IAC5BA,IAAI,CAAC,UAAD,CAAJ,CAAiBF,WAAjB,GAA+BG,QAA/B,CAAwCL,KAAxC,KACAI,IAAI,CAAC,gBAAD,CAAJ,CAAuBF,WAAvB,GAAqCG,QAArC,CAA8CL,KAA9C,CAFY,CAAb;AAICjB,IAAAA,eAAe,CAACuB,GAAG,IAAIZ,MAAR,CAAf;AACL;;AAED,QAAMa,OAAO,GAAG,CACd;AACEC,IAAAA,KAAK,EAAE,SADT;AACoBC,IAAAA,KAAK,EAAC,EAD1B;AAEEC,IAAAA,UAAU,EAAGb,UAAD,IAAgB;AAC1B,0BACE,QAAC,MAAD;AACE,QAAA,OAAO,EAAC,WADV;AAEE,QAAA,KAAK,EAAC,SAFR;AAGE,QAAA,OAAO,EAAGD,KAAD,IAAW;AAClBA,UAAAA,KAAK,CAACe,MAAN,GAAe,IAAf;AACAhB,UAAAA,WAAW,CAACC,KAAD,EAAQC,UAAR,CAAX;AACD,SANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAYD;AAfH,GADc,EAkBd;AAAEW,IAAAA,KAAK,EAAE,UAAT;AAAqBI,IAAAA,UAAU,EAAE,IAAjC;AAAuCH,IAAAA,KAAK,EAAC;AAA7C,GAlBc,EAmBd;AAAED,IAAAA,KAAK,EAAE,UAAT;AAAqBI,IAAAA,UAAU,EAAE,OAAjC;AAA0CH,IAAAA,KAAK,EAAC;AAAhD,GAnBc,EAoBd;AAAED,IAAAA,KAAK,EAAE,SAAT;AAAoBI,IAAAA,UAAU,EAAE,MAAhC;AAAwCH,IAAAA,KAAK,EAAC;AAA9C,GApBc,EAqBd;AAAED,IAAAA,KAAK,EAAE,YAAT;AAAuBI,IAAAA,UAAU,EAAC,SAAlC;AAA6CH,IAAAA,KAAK,EAAC;AAAnD,GArBc,EAsBd;AAAED,IAAAA,KAAK,EAAE,eAAT;AAA0BI,IAAAA,UAAU,EAAC,YAArC;AAAmDH,IAAAA,KAAK,EAAC,GAAzD;AACFC,IAAAA,UAAU,EAAEb,UAAD,IAAgB;AACzB,0BACE;AAAA,kBACGgB,iBAAiB,CAAChB,UAAD;AADpB;AAAA;AAAA;AAAA;AAAA,cADF;AAKD;AAPC,GAtBc,CAAhB;AAiCA,QAAMiB,SAAS,GAAG;AAChBL,IAAAA,KAAK,EAAE;AADS,GAAlB;;AAIA,WAASI,iBAAT,CAA2Bd,KAA3B,EAAiC;AAC/B,UAAMgB,iBAAiB,GAAG,EAA1B;;AACA,QAAG;AACD;AACA,UAAIC,SAAS,GAAGjB,KAAK,CAACC,KAAN,CAAYiB,KAAZ,CAAkB,GAAlB,CAAhB;AAAA,UAAuCC,CAAvC;;AACA,WAAIA,CAAC,GAAC,CAAN,EAASA,CAAC,GAAGF,SAAS,CAACG,MAAvB,EAA+BD,CAAC,EAAhC,EAAmC;AACjC;AACA,YAAIE,UAAU,GAAGJ,SAAS,CAACE,CAAD,CAA1B;AACAH,QAAAA,iBAAiB,IAAI,WAArB;AACD;AACF,KARD,CASA,OAAMM,EAAN,EAAS,CACR;AACA;;AACD,WAAON,iBAAP;AACD;;AAED,sBACQ;AAAA,eACG7B,KAAK,iBACJ;AAAK,MAAA,KAAK,EAAE;AAAEoC,QAAAA,KAAK,EAAG;AAAV,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,EAMGtC,SAAS,gBACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADc,gBAGV;AAAA,8BACA;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,SAAS,EAAC,cAA7B;AAA4C,QAAA,WAAW,EAAC,eAAxD;AAAwE,QAAA,KAAK,EAAEI,MAA/E;AAAuF,QAAA,QAAQ,EAAEU;AAAjG;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAK,QAAA,KAAK,EAAE;AAAEyB,UAAAA,OAAO,EAAE,MAAX;AAAmBC,UAAAA,MAAM,EAAE,OAA3B;AAAoCf,UAAAA,KAAK,EAAC;AAA1C,SAAZ;AAAA,+BACE;AAAK,UAAA,KAAK,EAAE;AAAEgB,YAAAA,QAAQ,EAAE;AAAZ,WAAZ;AAAA,iCACE,QAAC,QAAD;AAAU,YAAA,OAAO,EAAElB,OAAnB;AAA4B,YAAA,IAAI,EAAEzB,YAAY,IAAIA,YAAY,CAACqC,MAAb,GAAsB,CAAtC,GAA0CrC,YAA1C,GAAyDF,IAA3F;AAAiG,YAAA,QAAQ,EAAG8C,GAAD,IAASA,GAAG,CAACC,QAAxH,CACA;AADA;AAEA,YAAA,UAAU,EAAE,CAACC,MAAD,EAAShC,KAAT,KAAmB;AAC7B,kBAAI,CAACA,KAAK,CAACe,MAAX,EAAmB;AACjBrB,gBAAAA,OAAO,CAACuC,IAAR,CAAa,wBAAwBD,MAAM,CAACF,GAAP,CAAWC,QAAhD,EADiB,CAEjB;AACD;AACF,aAPD;AAQA,YAAA,UAAU,EAAE;AAACG,cAAAA,OAAO,EAAExD;AAAV,aARZ;AASA,YAAA,wBAAwB,EAAE,IAT1B;AAUA,YAAA,uBAAuB,EAAE;AAVzB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADR;AA+BD,CAvID;;GAAMI,S;UAMYN,U,EAC2BK,W;;;KAPvCC,S;AA2IN,eAAeA,SAAf","sourcesContent":["import React, {useState,useEffect} from \"react\";\nimport axios from \"axios\"\nimport EventType from \"./EventType\"\nimport { useHistory } from 'react-router-dom';\nimport { DataGrid , GridToolbar, GridRowParams} from '@mui/x-data-grid';\nimport { Button } from \"@mui/material\";\nimport { useSnackbar } from 'notistack';\n//import { authHeader } from '../Authentication/authHeader'\n\n\n\nconst GetEvents = (props) => {\n  const [data, setData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [search, setSearch] = useState('');\n  const history = useHistory();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n\n  //console.log(localStorage.getItem('user'));\n\n  useEffect(() => {\n    \n    const fetchData = async () => {\n      setIsLoading(true);\n      try{\n          const result = await axios(\n            'https://bomreactapi.azurewebsites.net/events/getevents', \n          );\n          setData(result.data);\n          enqueueSnackbar('Events fetch success');\n      }\n        catch(error){\n        setError(true)\n        enqueueSnackbar('Event fetch failed');\n      }\n \n      \n      setIsLoading(false);\n      //console.log(data);\n    };\n \n    fetchData();\n  }, []);\n\n  const handleClone = (event, cellValues) => {\n    //console.log(cellValues.row);\n    enqueueSnackbar('Event Cloned');\n  };\n\n  function handleSearchChange(input){\n    setSearch(input.value);\n    let value = input.target.value.toLowerCase();\n       let result = data.filter(item => \n        item[\"BP_Title\"].toLowerCase().includes(value) ||\n        item[\"BP_Description\"].toLowerCase().includes(value)\n       );\n        setFilteredData(arr => result);\n  }\n\n  const columns = [\n    {\n      field: \"Actions\", width:75,\n      renderCell: (cellValues) => {\n        return (\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={(event) => {\n              event.ignore = true;\n              handleClone(event, cellValues);\n            }}\n          >\n            Clone\n          </Button>\n        );\n      }\n    },\n    { field: 'EventsID', headerName: 'ID', width:125 },\n    { field: 'BP_Title', headerName: 'Title', width:200},\n    { field: 'BP_Type', headerName: 'Type', width:100},\n    { field: 'BP_Address', headerName:'Address', width:200},\n    { field: 'BP_Categories', headerName:'Categories', width:100,\n  renderCell:(cellValues) => {\n    return (\n      <div>\n        {getCategoriesById(cellValues)}\n      </div>\n    )\n  }},\n  ];\n\n\n  const gridStyle = {\n    width: 1000,\n  }\n\n  function getCategoriesById(input){\n    const returnValueString = '';\n    try{\n      //console.log(JSON.stringify(values.value));\n      let splitVals = input.value.split(';'),i;\n      for(i=0; i < splitVals.length; i++){\n        //get corresponding categories\n        let categoryId = splitVals[i];\n        returnValueString += \"Category,\"\n      }\n    }\n    catch(ex){\n     // console.log(ex);\n    }\n    return returnValueString;\n  }\n\n  return (\n          <div>\n            {error && (\n              <div style={{ color: `red` }}>\n                Error occurred while fetching api, Please contact an admin\n              </div>\n            )}\n            {isLoading ? (\n        <div>Loading ...</div>\n          ) : (\n            <div>\n            <input type='text' className='form-control' placeholder=\"Search Events\" value={search} onChange={handleSearchChange}/>\n            <div style={{ display: 'flex', height: '500px', width:'1000px' }}>\n              <div style={{ flexGrow: 1 }}>\n                <DataGrid columns={columns} rows={filteredData && filteredData.length > 0 ? filteredData : data} getRowId={(row) => row.EventsID} \n                //onRowClick={(row) => history.push(\"/events/edit/\" + row.id)} \n                onRowClick={(params, event) => {\n                  if (!event.ignore) {\n                    history.push(\"/admin/events/edit/\" + params.row.EventsID)\n                    //console.log(\"push -> /roles/\" + params.row.id);\n                  }\n                }}\n                components={{Toolbar: GridToolbar,}} \n                disableMultipleSelection={true} \n                disableSelectionOnClick={true} \n                /> \n              </div>\n            </div>\n            </div>\n          )}\n          </div>) \n}\n\n\n\nexport default GetEvents\n\n\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/joshuaadams/Documents/BOM/src/Admin/Events/GetEvents.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport EventType from \"./EventType\";\nimport { useHistory } from 'react-router-dom';\nimport { DataGrid, GridToolbar, GridRowParams } from '@mui/x-data-grid';\nimport { Button } from \"@mui/material\";\nimport { useSnackbar } from 'notistack';\nimport dompurify from 'dompurify'; //import { authHeader } from '../Authentication/authHeader'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GetEvents = props => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [categoriesList, setCategoriesList] = useState([]); // const [filteredData, setFilteredData] = useState([]);\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(false); // const [search, setSearch] = useState('');\n\n  const history = useHistory();\n  const {\n    enqueueSnackbar,\n    closeSnackbar\n  } = useSnackbar(); //console.log(localStorage.getItem('user'));\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n\n      try {\n        const categoriesListResult = await axios.get('https://bomreactapi.azurewebsites.net/events/getcategories');\n        setCategoriesList(categoriesListResult.data);\n        const result = await axios('https://bomreactapi.azurewebsites.net/events/getevents');\n        setData(result.data);\n        enqueueSnackbar('Events fetch success');\n      } catch (error) {\n        setError(true);\n        enqueueSnackbar('Event fetch failed');\n      }\n\n      setIsLoading(false); //console.log(data);\n    };\n\n    fetchData();\n  }, []);\n\n  const handleClone = (event, cellValues) => {\n    //console.log(cellValues.row);\n    enqueueSnackbar('Event Cloned');\n  };\n\n  const viewAttendees = (event, cellValues) => {\n    history.push('/admin/events/viewattendees/' + cellValues.row[\"EventsID\"]);\n  };\n\n  const columns = [{\n    field: \"Actions\",\n    width: 275,\n    renderCell: cellValues => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: event => {\n            event.ignore = true;\n            handleClone(event, cellValues);\n          },\n          children: \"Clone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), \" |\", /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: event => {\n            event.ignore = true;\n            viewAttendees(event, cellValues);\n          },\n          children: \"View Attendees\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this);\n    }\n  }, {\n    field: 'EventsID',\n    headerName: 'ID',\n    width: 75\n  }, {\n    field: 'BP_Type',\n    headerName: 'Type',\n    width: 100\n  }, {\n    field: 'BP_Title',\n    headerName: 'Title',\n    width: 200\n  }, {\n    field: 'BP_Address',\n    headerName: 'Address',\n    width: 200\n  }, {\n    field: 'BP_Categories',\n    headerName: 'Categories',\n    width: 300,\n    renderCell: cellValues => {\n      var _cellValues$value;\n\n      let returnVal = '';\n      let splitVals = cellValues === null || cellValues === void 0 ? void 0 : (_cellValues$value = cellValues.value) === null || _cellValues$value === void 0 ? void 0 : _cellValues$value.split(';');\n      splitVals === null || splitVals === void 0 ? void 0 : splitVals.map(catid => {\n        let cat = categoriesList === null || categoriesList === void 0 ? void 0 : categoriesList.find(x => x.CategoryID == catid);\n        returnVal += cat === null || cat === void 0 ? void 0 : cat.CategoryDisplayName;\n      });\n      return returnVal;\n    }\n  }];\n  const gridStyle = {\n    width: 1000\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: `red`\n      },\n      children: \"Error occurred while fetching api, Please contact an admin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 15\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading ...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(DataGrid, {\n        flexGrow: true,\n        autoHeight: true,\n        autoPageSize: true,\n        pageSize: 100,\n        columns: columns,\n        rows: data,\n        getRowId: row => row.EventsID //onRowClick={(row) => history.push(\"/events/edit/\" + row.id)} \n        ,\n        onRowClick: (params, event) => {\n          if (!event.ignore) {\n            history.push(\"/admin/events/edit/\" + params.row.EventsID); //console.log(\"push -> /roles/\" + params.row.id);\n          }\n        },\n        components: {\n          Toolbar: GridToolbar\n        },\n        disableMultipleSelection: true,\n        disableSelectionOnClick: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 11\n  }, this);\n};\n\n_s(GetEvents, \"kw8x4NoXflj+1QtiGt7riLvoALE=\", false, function () {\n  return [useHistory, useSnackbar];\n});\n\n_c = GetEvents;\nexport default GetEvents;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetEvents\");","map":{"version":3,"sources":["/Users/joshuaadams/Documents/BOM/src/Admin/Events/GetEvents.js"],"names":["React","useState","useEffect","axios","EventType","useHistory","DataGrid","GridToolbar","GridRowParams","Button","useSnackbar","dompurify","GetEvents","props","data","setData","categoriesList","setCategoriesList","isLoading","setIsLoading","error","setError","history","enqueueSnackbar","closeSnackbar","fetchData","categoriesListResult","get","result","handleClone","event","cellValues","viewAttendees","push","row","columns","field","width","renderCell","ignore","headerName","returnVal","splitVals","value","split","map","catid","cat","find","x","CategoryID","CategoryDisplayName","gridStyle","color","EventsID","params","Toolbar"],"mappings":"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","sourcesContent":["import React, {useState,useEffect} from \"react\";\nimport axios from \"axios\"\nimport EventType from \"./EventType\"\nimport { useHistory } from 'react-router-dom';\nimport { DataGrid , GridToolbar, GridRowParams} from '@mui/x-data-grid';\nimport { Button } from \"@mui/material\";\nimport { useSnackbar } from 'notistack';\nimport dompurify from 'dompurify'\n//import { authHeader } from '../Authentication/authHeader'\n\n\n\nconst GetEvents = (props) => {\n  const [data, setData] = useState([]);\n  const [categoriesList, setCategoriesList] = useState([]);\n // const [filteredData, setFilteredData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(false);\n // const [search, setSearch] = useState('');\n  const history = useHistory();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n\n  //console.log(localStorage.getItem('user'));\n\n  useEffect(() => {\n    \n    const fetchData = async () => {\n      setIsLoading(true);\n      try{\n\n        const categoriesListResult = await axios.get('https://bomreactapi.azurewebsites.net/events/getcategories');\n        setCategoriesList(categoriesListResult.data);\n\n        const result = await axios(\n            'https://bomreactapi.azurewebsites.net/events/getevents', \n        );\n        setData(result.data);\n        enqueueSnackbar('Events fetch success');\n      }\n        catch(error){\n        setError(true)\n        enqueueSnackbar('Event fetch failed');\n      }\n \n      \n      setIsLoading(false);\n      //console.log(data);\n    };\n \n    fetchData();\n  }, []);\n\n  const handleClone = (event, cellValues) => {\n    //console.log(cellValues.row);\n    enqueueSnackbar('Event Cloned');\n  };\n\n  const viewAttendees = (event, cellValues) => {\n    \n    history.push('/admin/events/viewattendees/' + cellValues.row[\"EventsID\"]);\n  };\n\n  const columns = [\n    {\n      field: \"Actions\", width:275,\n      renderCell: (cellValues) => {\n        return (\n          <div>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={(event) => {\n              event.ignore = true;\n              handleClone(event, cellValues);\n            }}\n          >\n            Clone\n          </Button> | \n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={(event) => {\n              event.ignore = true;\n              viewAttendees(event, cellValues);\n            }}\n          >\n            View Attendees\n          </Button>\n          </div>\n        );\n      }\n    },\n    { field: 'EventsID', headerName: 'ID', width:75 },\n    { field: 'BP_Type', headerName: 'Type', width:100},\n    { field: 'BP_Title', headerName: 'Title', width:200},\n    { field: 'BP_Address', headerName:'Address', width:200},\n    { field: 'BP_Categories', headerName:'Categories', width:300,\n    renderCell: (cellValues) => {\n      let returnVal ='';\n      let splitVals = cellValues?.value?.split(';');\n      splitVals?.map((catid) => \n      {\n          let cat = categoriesList?.find(x=> x.CategoryID == catid);\n          returnVal += cat?.CategoryDisplayName;\n          \n      }\n      );\n      return (\n        returnVal    \n      )\n    },\n  },\n  ];\n\n\n  const gridStyle = {\n    width: 1000,\n  }\n  \n  return (\n          <div>\n            {error && (\n              <div style={{ color: `red` }}>\n                Error occurred while fetching api, Please contact an admin\n              </div>\n            )}\n            {isLoading ? (\n        <div>Loading ...</div>\n          ) : (\n            \n            <div>\n                <DataGrid flexGrow autoHeight={true} autoPageSize={true} pageSize={100} columns={columns} rows={data} getRowId={(row) => row.EventsID} \n                //onRowClick={(row) => history.push(\"/events/edit/\" + row.id)} \n                onRowClick={(params, event) => {\n                  if (!event.ignore) {\n                    history.push(\"/admin/events/edit/\" + params.row.EventsID)\n                    //console.log(\"push -> /roles/\" + params.row.id);\n                  }\n                }}\n                components={{Toolbar: GridToolbar,}} \n                disableMultipleSelection={true} \n                disableSelectionOnClick={true} \n                /> \n            </div>\n           \n          )}\n          </div>) \n}\n\n\n\nexport default GetEvents\n\n\n"]},"metadata":{},"sourceType":"module"}